# Generic build number, later set to commit hash by init
version: '{build}'

# Do not build on tags (GitHub only)
skip_tags: true
clone_depth: 1

# Include "nodeploy" in the commit message to prevent deployment to github

environment:
  # set the Python version for macos and linux here, for windows set the path in the
  PYTHON_VER: 3.10

  matrix:
#  - job_name: windows_legacy
#    appveyor_build_worker_image: Visual Studio 2019
  - job_name: windows
    appveyor_build_worker_image: Visual Studio 2019
#  - job_name: macos
#    appveyor_build_worker_image: macos
#  - job_name: linux
#    appveyor_build_worker_image: Ubuntu2004

  
init:
  # Set "build version number" shown in appveyor build status to the commit hash, the build number keeps it unique
  - ps: Update-AppveyorBuild -Version "$($env:APPVEYOR_REPO_COMMIT.substring(0,7)) ($env:APPVEYOR_BUILD_NUMBER)"
  - ps: if($Env:inhibit_deploy -eq 'true'){Write-Host "**** Deploy Inhibited ****"}
  
branches:
  only:
    - master

stack:
  python ${PYTHON_VER}  #3.10 # if nothing else is specified per platform, this indicates the Python version to be used

for:
-
  matrix:
    only:
      - job_name: windows_legacy
    fast_finish: false

  environment:
    PYTHON_PATH: "C:\\Python38-x64"
    QT_PATH: "c:\\qt\\5.15\\msvc2019_64"
    PYUIC: "pyuic5.exe"
    BUILD_PYINSTALLER: "True"
    ARTISAN_LEGACY: "True"
    VC_REDIST: "https://aka.ms/vs/16/release/vc_redist.x64.exe"

  install:
    - cmd: echo Windows Legacy Install
    - cmd: set PATH=%PYTHON_PATH%;%PYTHON_PATH%\Scripts;%PATH%
    - ps: $env:PYINSTALLER_VER = Select-String -Path ./src/requirements-win-legacy.txt 'pyinstaller==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value} 
    - ps: $env:LIBUSB_VER = Select-String -Path ./src/requirements-win-legacy.txt 'libusb==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value} 
    - cmd: .ci\install-win.bat LEGACY

  build_script:
    - cmd: echo Windows Legacy Build
    - cmd: cd src
        
    #update the copyright year used by pyinstaller to set exe propertis for Windows
    - ps: $YEAR=(Get-Date).year
    - ps: gc version-metadata.yml | %{ $_ -replace "yyyy", "$YEAR" } | out-file newfile -encoding ascii
    - ps: move -force newfile version-metadata.yml

    # update the __revision__ field with the left seven of the GIT commit hash
    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
    - ps: move -force newfile artisanlib/__init__.py

    # run the install script
    - cmd: build-win3-pi.bat LEGACY

#  test_script:
#    - cmd: python -m unittest discover

#  artifacts:
#    - path: 'src\artisan-*.zip'

  deploy_script:
    - cmd: bash ../.ci/upload.sh artisan-*.zip

-
  matrix:
    only:
      - job_name: windows
    fast_finish: false

  environment:
#    PYTHON_PATH: "C:\\Python310-x64"
    QT_PATH: "C:\\qt\\6.2\\msvc2019_64"
    PYUIC: "pyuic6.exe"
    BUILD_PYINSTALLER: "True"
    ARTISAN_LEGACY: "False"
    VC_REDIST: "https://aka.ms/vs/17/release/vc_redist.x64.exe"

  install:
    - ps: Write-Host $env:PYTHON_VER
    - ps: $env:PYTHON_PATH = $env:PYTHON_VER -replace '\.',''

    - cmd: echo Windows Install
    - cmd: set PATH=%PYTHON_PATH%;%PYTHON_PATH%\Scripts;%PATH%
    - ps: $env:PYINSTALLER_VER = Select-String -Path ./src/requirements-win.txt 'pyinstaller==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value} 
    - ps: $env:LIBUSB_VER = Select-String -Path ./src/requirements-win.txt 'libusb==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value} 

#    - cmd: .ci\install-win.bat

  build_script:
    - ps: Write-Host $env:PYTHON_VER
    - cmd: echo Windows Build
    - cmd: cd src

    #update the copyright year used by pyinstaller to set exe propertis for Windows
    - ps: $YEAR=(Get-Date).year
    - ps: gc version-metadata.yml | %{ $_ -replace "yyyy", "$YEAR" } | out-file newfile -encoding ascii
    - ps: move -force newfile version-metadata.yml

    # update the __revision__ field with the left seven of the GIT commit hash
    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
    - ps: move -force newfile artisanlib/__init__.py

    # run the install script
#    - cmd: build-win3-pi.bat

#  test_script:
#    - cmd: python -m unittest discover

#  artifacts:
#    - path: 'src\artisan-*.zip'

  deploy_script:
    - cmd: bash ../.ci/upload.sh artisan-*.zip


-
  matrix:
    only:
      - job_name: macos
    fast_finish: false

  environment:
    ARTISAN_OS: osx
    #PYTHON_V: 3.10
    PYTHON_V: ${PYTHON_VER}  #3.10
    PYTHONPATH: /usr/local/lib/python${PYTHON_V}
    MACOSX_DEPLOYMENT_TARGET: 10.15

  install:
    - echo ${PYTHON_V}
    - echo $PYTHON_V

    - echo "MacOS Install"
    - chmod +x .ci/*.sh
    # update the __revision__ field with the left seven of the GIT commit hash
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
    # set env variable for libxml version
    - ps: $env:LXML_VER = Select-String -Path src/requirements-osx.txt 'libxml==([\d\.]*)' -List | ForEach-Object {$_.Matches.Groups[1].Value}`
    #- export LXML_VER="$(grep -F -m 1 'libxml==' src/requirements-osx.txt)"; LIBXML_VER="${LIBXML_VER#*\=\=}"; LIBXML_VER="${LIBXML_VER%% *}"

    # run the install script
    - .ci/install-${ARTISAN_OS}.sh

  build_script:
    - echo "MacOS Build"
    - chmod +x src/*.sh
    - chmod +x src/pylupdate6pro
    - .ci/script-${ARTISAN_OS}.sh

# unit test fails as it runs on Py3.9 while the build installs under brew isntalled Py3.10 (see build-mac3.py)
#  test_script:
#    - python -m unittest discover -s src

#  artifacts:
#    - path: 'src/artisan-*.dmg'

  deploy_script:
    - cd src
    - bash ../.ci/upload.sh artisan-*.dmg


-
  matrix:
    only:
      - job_name: linux
    fast_finish: false

  environment:
    ARTISAN_OS: linux
    PYTHON_V: ${PYTHON_VER}  #3.10
    PYTHON_PATH: /home/appveyor/venv${PYTHON_V}/lib/python${PYTHON_V}/site-packages

  install:
    - echo "Linux Install"
    - chmod +x .ci/*.sh
    # update the __revision__ field with the left seven of the GIT commit hash
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
    # run the install script
    - .ci/install-${ARTISAN_OS}.sh

  build_script:
    - echo "Linux Build"
    - chmod +x src/*.sh
    - .ci/script-${ARTISAN_OS}.sh

#  test_script:
#    - QT_QPA_PLATFORM=offscreen python -m unittest discover -s src

#  artifacts:
#    - path: 'src/artisan-*.deb'
#    - path: 'src/artisan-*.rpm'
#    - path: 'src/artisan-*.AppImage'

  deploy_script:
    - cd src
    - bash ../.ci/upload.sh artisan-*.deb
    - bash ../.ci/upload.sh artisan-*.rpm
    - bash ../.ci/upload.sh artisan-*.AppImage

