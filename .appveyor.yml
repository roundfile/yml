# Generic build number, later set to commit hash by init
version: '{build}'

# Do not build on tags (GitHub only)
skip_tags: true
clone_depth: 1

# Include "nodeploy" in the commit message to prevent deployment to github

environment:
  matrix:
  - job_name: windows_legacy
    appveyor_build_worker_image: Visual Studio 2019
  - job_name: windows
    appveyor_build_worker_image: Visual Studio 2019
#  - job_name: macos
#    appveyor_build_worker_image: macos
#  - job_name: linux
#    appveyor_build_worker_image: Ubuntu2004
#  - job_name: rpi
#    appveyor_build_worker_image: Ubuntu1604

matrix:
  allow_failures:
    - job_name: rpi

init:
  # Set "build version number" shown in appveyor build status to the commit hash, the build number keeps it unique
  - ps: Update-AppveyorBuild -Version "$($env:APPVEYOR_REPO_COMMIT.substring(0,7)) ($env:APPVEYOR_BUILD_NUMBER)"
  - ps: if($Env:inhibit_deploy -eq 'true'){Write-Host "**** Deploy Inhibited ****"}

branches:
  only:
    - master

#stack:
#  python 3.9

for:
-
  matrix:
    only:
      - job_name: windows_legacy
    fast_finish: false

  environment:
    PYTHON_PATH: "C:\\Python38-x64"
    QT_PATH: "c:\\qt\\5.15\\msvc2019_64"
    PYUIC: "pyuic5.exe"
    PYINSTALLER_VER: "4.3"
    VC_REDIST: "https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe"
    UPLOADTOOL_BODY:
      "WARNING: pre-release builds may not work. Use at your own risk."

  install:
    - "SET PATH=%PYTHON_APV%;%PYTHON_APV%\\Scripts;%PATH%"
    - .ci\install-win.bat LEGACY

  build_script:
    - echo "Windows Legacy Build"
    - cmd: cd src
    - cd

    # update the __revision__ field with the left seven of the GIT commit hash
    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
    - ps: move -force newfile artisanlib/__init__.py

    # run the install script
    - cmd: cd
    - cmd: build-win3-pi.bat LEGACY
    - cmd: copy ..\LICENSE LICENSE.txt
    - cmd: 7z a artisan-win-legacy-%ARTISAN_VERSION%.zip Setup*.exe LICENSE.txt README.txt

#  artifacts:
#    - path: 'src\artisan-*.zip'

  deploy_script:
    - cmd: curl -L -O https://github.com/roasterdave/uploadtool/raw/master/upload.sh
    - cmd: bash upload.sh artisan-*.zip


-
  matrix:
    only:
      - job_name: windows
    fast_finish: false

  environment:
    PYTHON_APV: "C:\\Python310-x64"
    QT_APV: "C:\\qt\\6.2\\msvc2019_64"
    PYINSTALLER_VER: "4.7"
    VC_REDIST: "https://aka.ms/vs/17/release/vc_redist.x64.exe"
    UPLOADTOOL_BODY:
      "WARNING: pre-release builds may not work. Use at your own risk."

  install:
####    - echo "Windows Install"
    - "SET PATH=%PYTHON_APV%;%PYTHON_APV%\\Scripts;%PATH%"
    - .ci\install-win.bat
######$$##    - set QT_DIR=C:\Qt\6.2\msvc2019_64
######$$##    - set PY_DIR=C:\Python38-x64
######$$##    - set PATH=%QT_DIR%\bin;%PY_DIR%;%PATH%
######$$##    - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x86_amd64
#####    - qmake -v
#####    - python -VV
####    - echo "Python Version"
####    - python -V
####    - "%PYTHON%\\python.exe -m pip install --upgrade pip"
####    - "%PYTHON%\\python.exe -m pip install wheel"
########    - "%PYTHON%\\python.exe -m pip install .ci\\pyinstaller-4.7-py3-none-any.whl"
####  # start: build the pyinstaller bootloader and install
####    #- curl -L -O https://github.com/pyinstaller/pyinstaller/releases/download/v%PYINSTALLER_VER%/PyInstaller-%PYINSTALLER_VER%.tar.gz
####    - curl -L -O https://github.com/pyinstaller/pyinstaller/archive/refs/tags/v%PYINSTALLER_VER%.zip
####    - 7z x v%PYINSTALLER_VER%.zip
####    - del v%PYINSTALLER_VER%.zip
####    - cd pyinstaller-%PYINSTALLER_VER%\bootloader
####    - "%PYTHON%\\python.exe ./waf all --target-arch=64bit"
####    - cd ..
####    - "%PYTHON%\\python.exe setup.py -q install"
####    - cd ..
####  # end: build the pyinstaller bootloader and install
####    - "%PYTHON%\\python.exe -m pip install -r src\\requirements.txt"
####    - "%PYTHON%\\python.exe -m pip install -r src\\requirements-win.txt"
####    - curl -L -O https://aka.ms/vs/17/release/vc_redist.x64.exe
#####    - curl -L -O https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe
####  #  - curl -k -L -O https://kent.dl.sourceforge.net/project/snap7/1.4.2/snap7-full-1.4.2.7z
####    - curl -k -L -O https://netcologne.dl.sourceforge.net/project/snap7/1.4.2/snap7-full-1.4.2.7z
####    - 7z x snap7-full-1.4.2.7z
####    - copy snap7-full-1.4.2\build\bin\win64\snap7.dll c:\windows
####    - curl -k -L -O https://netcologne.dl.sourceforge.net/project/libusb-win32/libusb-win32-releases/1.2.6.0/libusb-win32-bin-1.2.6.0.zip
####    - 7z x libusb-win32-bin-1.2.6.0.zip
####    - copy libusb-win32-bin-1.2.6.0\bin\amd64\libusb0.dll C:\Windows\SysWOW64


  build_script:
    - echo "Windows Build"
    - cmd: cd src
    # update the __revision__ field with the left seven of the GIT commit hash
    - ps: $GIT_VERSION=git rev-parse --verify --short HEAD
    - ps: gc artisanlib/__init__.py | %{ $_ -replace "__revision__ = '0'", "__revision__ = '$GIT_VERSION'" } | out-file newfile -encoding ascii
    - ps: move -force newfile artisanlib/__init__.py
    # run the install script
    - cmd: build-win3-pi.bat
    - cmd: copy ..\LICENSE LICENSE.txt
    - cmd: 7z a artisan-win-%ARTISAN_VERSION%.zip Setup*.exe LICENSE.txt README.txt

  test_script:
    - python -m unittest discover

#  artifacts:
#    - path: 'src\artisan-*.zip'

  deploy_script:
    - cmd: curl -L -O https://github.com/roasterdave/uploadtool/raw/master/upload.sh
    - cmd: bash upload.sh artisan-*.zip


-
  matrix:
    only:
      - job_name: macos
    fast_finish: false

  environment:
    ARTISAN_OS: osx
    PYTHON: ~/venv3.9
    language: generic
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_ANALYTICS: 1
    MACOSX_DEPLOYMENT_TARGET: 10.15

  install:
    - echo "MacOS Install"
    - chmod +x .ci/*.sh
    # update the __revision__ field with the left seven of the GIT commit hash
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
    # run the install script
    - .ci/install-${ARTISAN_OS}.sh

  build_script:
    - echo "MacOS Build"
    - chmod +x src/*.sh
    - ls -l src/artisan.pro
    - ls -l src/pylupdate6pro
    - chmod +x src/pylupdate6pro
    - .ci/script-${ARTISAN_OS}.sh

  test_script:
    - python -m unittest discover -s src

#  artifacts:
#    - path: 'src/artisan-*.dmg'

  deploy_script:
    - cd src
    - curl -L -O https://github.com/roasterdave/uploadtool/raw/master/upload.sh
    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
    - export UPLOADTOOL_ISPRERELEASE=true
    - bash upload.sh artisan-*.dmg

-
  matrix:
    only:
      - job_name: linux
    fast_finish: false

  environment:
    ARTISAN_OS: linux
    PYTHON: $HOME/venv3.9

  install:
    - echo "Linux Install"
    - chmod +x .ci/*.sh
    # update the __revision__ field with the left seven of the GIT commit hash
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
    # run the install script
    - .ci/install-${ARTISAN_OS}.sh

  build_script:
    - echo "Linux Build"
    - chmod +x src/*.sh
    - .ci/script-${ARTISAN_OS}.sh

  test_script:
    - QT_QPA_PLATFORM=offscreen python -m unittest discover -s src

#  artifacts:
#    - path: 'src/artisan-*.deb'
#    - path: 'src/artisan-*.rpm'

  deploy_script:
    - cd src
    - curl -L -O https://github.com/roasterdave/uploadtool/raw/master/upload.sh
    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
    - export UPLOADTOOL_ISPRERELEASE=true
    - bash upload.sh artisan-*.deb
    - bash upload.sh artisan-*.rpm
    - bash upload.sh artisan-*.AppImage

-
  matrix:
    only:
      - job_name: rpi
    fast_finish: false

  environment:
    ARTISAN_OS: rpi
    PYTHON: $HOME/venv3.9

  install:
    - echo "RPI Install"
    - chmod +x ./.ci/*.sh
    - export GIT_VERSION=`git rev-parse --verify --short HEAD 2>/dev/null|| echo "???"`
    - sed -i'' -e "s/__revision__ = '0'/__revision__ = '$GIT_VERSION'/" src/artisanlib/__init__.py
    - .ci/install-${ARTISAN_OS}.sh

  build_script:
    - echo "RPI Build"
    - chmod +x src/*.sh
    - .ci/script-${ARTISAN_OS}.sh

#  artifacts:
#    - path: 'src/artisan-*.deb'

  deploy_script:
    - cd src
    - curl -L -O https://github.com/roasterdave/uploadtool/raw/master/upload.sh
    - export UPLOADTOOL_BODY="WARNING pre-release builds may not work. Use at your own risk."
    - export UPLOADTOOL_ISPRERELEASE=true
    - bash upload.sh artisan-*.deb
